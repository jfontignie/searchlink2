// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.searchlink.domain;

import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.searchlink.domain.Author;
import org.searchlink.domain.Product;
import org.searchlink.domain.ProductState;

privileged aspect Product_Roo_Finder {
    
    public static TypedQuery<Product> Product.findProductsByAuthors(Set<Author> authors) {
        if (authors == null) throw new IllegalArgumentException("The authors argument is required");
        EntityManager em = Product.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Product AS o WHERE");
        for (int i = 0; i < authors.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :authors_item").append(i).append(" MEMBER OF o.authors");
        }
        TypedQuery<Product> q = em.createQuery(queryBuilder.toString(), Product.class);
        int authorsIndex = 0;
        for (Author _author: authors) {
            q.setParameter("authors_item" + authorsIndex++, _author);
        }
        return q;
    }
    
    public static TypedQuery<Product> Product.findProductsByIdentifierEquals(String identifier) {
        if (identifier == null || identifier.length() == 0) throw new IllegalArgumentException("The identifier argument is required");
        EntityManager em = Product.entityManager();
        TypedQuery<Product> q = em.createQuery("SELECT o FROM Product AS o WHERE o.identifier = :identifier", Product.class);
        q.setParameter("identifier", identifier);
        return q;
    }
    
    public static TypedQuery<Product> Product.findProductsByState(ProductState state) {
        if (state == null) throw new IllegalArgumentException("The state argument is required");
        EntityManager em = Product.entityManager();
        TypedQuery<Product> q = em.createQuery("SELECT o FROM Product AS o WHERE o.state = :state", Product.class);
        q.setParameter("state", state);
        return q;
    }
    
}
